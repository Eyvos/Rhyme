openapi: 3.0.1
info:
  title: "Rhyme"
  description: "A social network API when the posts have to be acrostic of the post title"
  version: "1.0.0"
servers:
  - url: "{protocol}://{server}"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      server:
        default: localhost:8080
tags:
  - name: "Auth"
    description: "Connect to the API to get more features"
  - name: "Users"
    description: "Everything about users"
  - name: "Rhymes"
    description: "Everything about rhymes"
paths:
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Login to the application"
      description: ""
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailPassword"
        required: true
      responses:
        "200":
          description: "Login successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/json_web_token"
        "401":
          description: "Invalid username/password supplied"
  /auth/register:
    post:
      tags:
        - "Auth"
      summary: "Create an account on the application"
      description: ""
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailUsernamePassword"
        required: true
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid username/password supplied"
  /users:
    get:
      tags:
        - "Users"
      summary: "Get all users"
      description: ""
      operationId: "getUsers"
      parameters:
        - name: "limit"
          in: "query"
          description: "How many items to return at one time (max 100)"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 20
        - name: "page"
          in: query
          description: "Which page to return"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: "username"
          in: query
          description: "Filter by username"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username/password supplied"
    put:
      tags:
        - "Users"
      summary: "Update user's username"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailUsernamePassword"
        required: true
      responses:
        "200":
          description: "successful operation"
          $ref: "#/components/schemas/User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized"
  /users/{userId}:
    get:
      tags:
        - "Users"
      summary: "Get user by id"
      description: ""
      operationId: "getUserById"
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username/password supplied"

    delete:
      tags:
        - "Users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized"
  /users/password:
    put:
      tags:
        - "Users"
      summary: "Update user password"
      description: "This can only be done by the logged in user."
      operationId: "updateUserPassword"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailOldPasswordNewPassword"
        required: true
      responses:
        "200":
          description: "successful operation"
          $ref: "#/components/schemas/User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized"
  /rhymes:
    get:
      tags:
        - "Rhymes"
      summary: "Get all rhymes"
      description: ""
      operationId: "getRhymes"
      parameters:
        - name: "limit"
          in: "query"
          description: "How many items to return at one time (max 100)"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 20
        - name: "page"
          in: query
          description: "Which page to return"
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: "title"
          in: query
          description: "Filter by title"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RhymeWithId"
        "400":
          description: "Invalid username/password supplied"
    post:
      tags:
        - "Rhymes"
      summary: "Create rhyme"
      description: "This can only be done by the logged in user."
      operationId: "createRhyme"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rhyme"
        required: true
      responses:
        "200":
          description: "successful operation"
          $ref: "#/components/schemas/Rhyme"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rhyme"
        "401":
          description: "Unauthorized"
  /rhymes/{rhymeId}:
    get:
      tags:
        - "Rhymes"
      summary: "Get rhyme by id"
      description: ""
      operationId: "getRhymeById"
      parameters:
        - $ref: "#/components/parameters/rhymeId"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RhymeWithId"
        "400":
          description: "Invalid username/password supplied"
    delete:
      tags:
        - "Rhymes"
      summary: "Delete rhyme"
      description: "This can only be done by the logged in user."
      operationId: "deleteRhyme"
      parameters:
        - $ref: "#/components/parameters/rhymeId"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RhymeWithId"
        "400":
          description: "Invalid username/password supplied"
        "401":
          description: "Unauthorized"

  /rhymes/user/{userId}:
    get:
      tags:
        - "Rhymes"
      summary: "Get rhymes by user id"
      description: ""
      operationId: "getRhymesByUserId"
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RhymeWithId"
        "400":
          description: "Invalid username/password supplied"
  /rhymes/parent/{parentId}:
    get:
      tags:
        - "Rhymes"
      summary: "Get rhymes by parent id"
      description: ""
      operationId: "getRhymesByParentId"
      parameters:
        - $ref: "#/components/parameters/rhymeId"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RhymeWithId"
        "400":
          description: "Invalid username/password supplied"
        "401":
          description: "Unauthorized"
components:
  parameters:
    userId:
      name: userId
      in: path
      description: "ID of user to return"
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    rhymeId:
      name: rhymeId
      in: path
      description: "ID of rhyme to return"
      required: true
      schema:
        type: integer
        format: int64
        example: 1
  schemas:
    json_web_token:
      type: string
      pattern: ^([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_\-\+\/=]+)$
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    EmailOldPasswordNewPassword:
      type: object
      required: [email, oldPassword, newPassword]
      properties:
        email:
          type: string
          example: "john.doe@test.com"
        oldPassword:
          type: string
          example: "password123"
        newPassword:
          type: string
          example: "newPassword123"
    EmailPassword:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          example: "john.doe@test.com"
        password:
          type: string
          example: "password123"
    EmailUsername:
      type: object
      required: [email, username]
      properties:
        email:
          type: string
          example: "john.doe@test.com"
        username:
          type: string
          example: "JohnDoe"
    EmailUsernamePassword:
      oneOf:
        - $ref: "#/components/schemas/EmailUsername"
      type: object
      required: [password]
      properties:
        password:
          type: string
          example: "password123"
    User:
      oneOf:
        - $ref: "#/components/schemas/EmailUsername"
      properties:
        id:
          type: integer
          format: int64
          example: 1
          nullable: true
    Rhyme:
      type: object
      properties:
        title:
          type: string
          example: "Rhyme"
        content:
          type: string
          example: "Rivers of words flowing, weaving tales,
            Harmonies in verse, where imagination prevails.
            Yearning for beauty in each line's rhyme,
            Molding emotions, frozen in time.
            Expressive language, a poet's chime."
        userId:
          type: integer
          format: int64
          example: 1
        parentId:
          type: integer
          nullable: true
          format: int64
          example: 1
    RhymeWithId:
      oneOf:
        - $ref: "#/components/schemas/Rhyme"
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
