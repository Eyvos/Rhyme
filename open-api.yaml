openapi: 3.0.1
info:
  title: "Rhyme"
  description: "A social network API when the posts have to be acrostic of the post title"
  version: "1.0.0"
servers:
  - url: "{protocol}://{server}"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      server:
        default: localhost:8080
tags:
  - name: "Auth"
    description: "Connect to the API to get more features"
  - name: "Users"
    description: "Everything about users"
  - name: "Rhymes"
    description: "Everything about rhymes"
#  - name: "Community"
#    description: "Everything about communities"
paths:
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Login to the application"
      description: ""
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username/password supplied"
  /auth/logout:
    get:
      tags:
        - "Auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid username/password supplied"
  /users:
    get:
      tags:
        - "Users"
      summary: "Get all users"
      description: ""
      operationId: "getUsers"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username/password supplied"
    post:
      tags:
        - "Users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPassword"
        required: true
      responses:
        "200":
          description: "successful operation"
          $ref: "#/components/schemas/User"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/User"
    put:
      tags:
        - "Users"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "successful operation"
          $ref: "#/components/schemas/User"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/User"
  /rhymes:
    get:
      tags:
        - "Rhymes"
      summary: "Get all rhymes"
      description: ""
      operationId: "getRhymes"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rhyme"
        "400":
          description: "Invalid username/password supplied"
    post:
      tags:
        - "Rhymes"
      summary: "Create rhyme"
      description: "This can only be done by the logged in user."
      operationId: "createRhyme"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rhyme"
        required: true
      responses:
        "200":
          description: "successful operation"
          $ref: "#/components/schemas/Rhyme"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/Rhyme"
components:
  parameters:
    userId:
      name: userId
      in: path
      description: "ID of user to return"
      required: true
      schema:
        type: integer
        format: int64
        example: 1
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          example: "john.doe@test.com"
        username:
          type: string
          example: "JohnDoe"
    UserPassword:
      oneOf:
        - $ref: "#/components/schemas/User"
      properties:
        password:
            type: string
            example: "password123"
    Rhyme:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Rhyme"
        content:
          type: string
          example: "Rivers of words flowing, weaving tales,
                    Harmonies in verse, where imagination prevails.
                    Yearning for beauty in each line's rhyme,
                    Molding emotions, frozen in time.
                    Expressive language, a poet's chime."
        userId:
          type: integer
          format: int64
          example: 1
        parentId:
          type: integer 
          nullable: true
          format: int64
          example: 1